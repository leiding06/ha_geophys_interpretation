# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HAGeophysInterpretation
                                 A QGIS plugin
 This plugin can help digitise pixels data to polygon and points.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Lei Ding
        email                : lei.ding@headlandarchaeology.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsSingleSymbolRenderer, QgsFillSymbol, QgsMarkerSymbol, QgsRasterLayer, QgsMapLayerProxyModel, QgsCoordinateReferenceSystem, QgsProject
from .exclusive_checkbox import toggle_checkboxes
from .ha_process_raster import process_pixel, tidy_points
import processing
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ha_geophys_interpretation_dialog import HAGeophysInterpretationDialog

import os.path
from qgis.utils import iface


class HAGeophysInterpretation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HAGeophysInterpretation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HA-Geophys Interpretation')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HAGeophysInterpretation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            pass

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ha_geophys_interpretation/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HA-Geophys Interpretation'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HA-Geophys Interpretation'),
                action)
            self.iface.removeToolBarIcon(action)

    def update_parameters(self):
        if self.dlg.tifCheckBox.isChecked():
            self.dlg.threshold.setText('0.5')
            self.dlg.minArea.setText('2')
            self.dlg.biggerThanValue.setText('5')
            self.dlg.smallerThanValue.setText('-1')
            self.dlg.maxAreaPoint.setText('5')
            self.dlg.minAreaPoint.setText('1')
            is_checked = self.dlg.pngCheckBox.isChecked() or self.dlg.tifCheckBox.isChecked()
            self.dlg.polygonParameter.setVisible(is_checked)
            self.dlg.pointParameter.setVisible(is_checked)
           
       
        elif self.dlg.pngCheckBox.isChecked():
            self.dlg.threshold.setText('100')
            self.dlg.minArea.setText('2')
            self.dlg.biggerThanValue.setText('250')
            self.dlg.smallerThanValue.setText('50')
            self.dlg.maxAreaPoint.setText('5')
            self.dlg.minAreaPoint.setText('1')
            is_checked = self.dlg.pngCheckBox.isChecked() or self.dlg.tifCheckBox.isChecked()
            self.dlg.polygonParameter.setVisible(is_checked)
            self.dlg.pointParameter.setVisible(is_checked)
         
  

    def run(self):
        """Run method that performs all the real work"""
       
        
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HAGeophysInterpretationDialog()
        # All checkbox start with unchecked
        self.dlg.pngCheckBox.setChecked(False)
        self.dlg.tifCheckBox.setChecked(False)
        self.dlg.geologyRemoveCheckBox.setChecked(False)
        
        self.dlg.greyscaleComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg.pngCheckBox.clicked.connect(lambda: toggle_checkboxes(self.dlg.pngCheckBox, self.dlg.tifCheckBox))
        self.dlg.tifCheckBox.clicked.connect(lambda: toggle_checkboxes(self.dlg.tifCheckBox, self.dlg.pngCheckBox))
        
        selected_first_raster = self.iface.layerTreeView().selectedLayers()
        if selected_first_raster and isinstance(selected_first_raster[0], QgsRasterLayer):
            self.dlg.greyscaleComboBox.setLayer(selected_first_raster[0])
        # default value for parameter:
        self.dlg.tifCheckBox.toggled.connect(self.update_parameters)
        self.dlg.pngCheckBox.toggled.connect(self.update_parameters)
        
        #set visible
        self.dlg.polygonParameter.setVisible(self.dlg.pngCheckBox.isChecked() or self.dlg.tifCheckBox.isChecked())

        self.dlg.pointParameter.setVisible(self.dlg.pngCheckBox.isChecked() or self.dlg.tifCheckBox.isChecked())


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            tifChecked = self.dlg.tifCheckBox.isChecked()
            pngChecked = self.dlg.pngCheckBox.isChecked()

            if not tifChecked and not pngChecked:
                msg_box = QMessageBox()
                msg_box.setText('Please select either PNG or TIFF')
                msg_box.exec_()

            raster_layer = self.dlg.greyscaleComboBox.currentLayer()
            polygonThreshold = float(self.dlg.threshold.text())
            polygonMinArea = float(self.dlg.minArea.text())
            pointBiggerValue = float(self.dlg.biggerThanValue.text()) 
            pointSmallerValue = float(self.dlg.smallerThanValue.text())
            pointMaxArea = float(self.dlg.maxAreaPoint.text())
            pointMinArea = float(self.dlg.minAreaPoint.text())
            base_name = os.path.splitext(raster_layer.name())[0]
            TARGET_CRS = QgsCoordinateReferenceSystem("EPSG:27700")

            


            polygon_area_exp = f'"area" IS NOT NULL AND "area" > {polygonMinArea}'
            point_value_exp = f'"VALUE" > {pointBiggerValue} OR "VALUE" < {pointSmallerValue}'
            if tifChecked:
                polygon_value_exp = f'"VALUE" > {polygonThreshold}'

            if pngChecked:
                polygon_value_exp = f'"VALUE" < {polygonThreshold}'
                
            

            # Add the polygon layer
            filtered_polygon = process_pixel(raster_layer,polygon_value_exp,polygon_area_exp )
            filtered_polygon.setCrs(TARGET_CRS)
            filtered_polygon.setName(f"Int_Polygon_{base_name}_{polygonThreshold}_{polygonMinArea}")
        

            # Create the point layer
            point_area_exp = f'"area" < {pointMaxArea} AND "area" > {pointMinArea}'
        
            filtered_polygon_for_points, disturbance_polygon = process_pixel(raster_layer,point_value_exp,point_area_exp, disturbance='Yes' )
            centroid = tidy_points(filtered_polygon_for_points)
            centroid.setCrs(TARGET_CRS)
            centroid.setName(f"FerrousObject_{base_name}_{pointBiggerValue}_{pointSmallerValue}")
            

            # Create the Ferrous Disturbance layer
            disturbance_polygon.setCrs(TARGET_CRS)
            disturbance_polygon.setName(f"FerrousDisturbance_{base_name}")


            QgsProject.instance().addMapLayer(filtered_polygon)
           
            QgsProject.instance().addMapLayer(disturbance_polygon)

            removeGeologyPoint = self.dlg.geologyRemoveCheckBox.isChecked()
           
            from qgis.core import QgsSpatialIndex

            if removeGeologyPoint:
                merged_polygons = processing.run("native:mergevectorlayers", {
                    'LAYERS': [filtered_polygon, disturbance_polygon],
                    'CRS': 'EPSG:27700',  
                    'OUTPUT': 'TEMPORARY_OUTPUT'
                })['OUTPUT']
                
                processing.run("native:selectbylocation",{
                                    'INPUT':centroid,
                                    'PREDICATE':[0],
                                    'INTERSECT': merged_polygons,
                                    'METHOD':0
                                })

                centroid.startEditing()
                try:
                    if centroid.selectedFeatureCount() > 0:
                        centroid.deleteSelectedFeatures()
                    centroid.commitChanges()  # Explicit save
                except Exception as e:
                    centroid.rollBack()
                    raise e
                QgsProject.instance().addMapLayer(centroid)

            else:
                QgsProject.instance().addMapLayer(centroid)
           
            # change the style for the Filtered polygon layer
            symbol = QgsFillSymbol.createSimple({
            'outline_style': 'solid',
            'outline_width':'0.2',
            'outline_color':'red',
            'fill_style':'solid',
            'color':'255, 0, 0, 40'})
            renderer = QgsSingleSymbolRenderer(symbol)
            filtered_polygon.setRenderer(renderer)
            filtered_polygon.triggerRepaint()


            # change the style for the Ferrous Polygon
            symbol = QgsFillSymbol.createSimple({
            'outline_style': 'solid',
            'outline_width':'0.2',
            'outline_color':'green',
            'fill_style':'solid',
            'color':'0, 255, 68, 40'})
            renderer = QgsSingleSymbolRenderer(symbol)
            disturbance_polygon.setRenderer(renderer)
            disturbance_polygon.triggerRepaint()

            # change the point style
            renderer = centroid.renderer()
            #print("Type: ",renderer.type())
            symbol = QgsMarkerSymbol.createSimple({
                'name': 'circle',
                'color': 'blue',
                'outline_style': 'no',
                'size': '1.5'})
            centroid.renderer().setSymbol(symbol)
            centroid.triggerRepaint()
            iface.layerTreeView().refreshLayerSymbology(centroid.id())

            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setWindowTitle("Automation Complete")
            msg_box.setText('Geophys Interpretation')
            msg_box.setInformativeText('The automation process has finished.\n\n✅ Please select features by category and paste to the master interpretation layers.')
            msg_box.exec_()
